name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Semantic Release
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm run test:ci

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v3
        with:
          semantic_version: 19
          extra_plugins: |
            @semantic-release/changelog@6.0.0
            @semantic-release/git@10.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # NPM Package Publication
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Publish package
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Docker Image Build and Push
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [release, build-docker]
    if: needs.release.outputs.new-release-published == 'true'
    environment:
      name: staging
      url: https://mcp-strudel-kit-staging.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying version ${{ needs.release.outputs.new-release-version }} to staging..."
          # Add actual deployment commands here
          # Example: kubectl set image deployment/mcp-server mcp-server=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.new-release-version }}

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add smoke test commands here
          # npm run test:smoke -- --url=https://mcp-strudel-kit-staging.example.com

      - name: Update staging status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ github.event.deployment.id }}',
              state: 'success',
              environment_url: 'https://mcp-strudel-kit-staging.example.com',
              description: 'Deployed to staging successfully'
            });

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [release, build-docker, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://mcp-strudel-kit.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying version ${{ needs.release.outputs.new-release-version }} to production..."
          # Add actual production deployment commands here

      - name: Run production health check
        run: |
          echo "Running production health checks..."
          # Add health check commands here

      - name: Update production status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ github.event.deployment.id }}',
              state: 'success',
              environment_url: 'https://mcp-strudel-kit.example.com',
              description: 'Deployed to production successfully'
            });

      - name: Notify team of successful deployment
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ needs.release.outputs.new-release-version }}';
            const message = `üöÄ Successfully deployed Strudel Kit MCP Server v${version} to production!

            üì¶ Package: https://www.npmjs.com/package/strudel-kit-mcp-server/v/${version}
            üê≥ Docker: ghcr.io/${{ github.repository }}:${version}
            üåê Live: https://mcp-strudel-kit.example.com

            Changes included in this release:
            - Check the release notes for full details

            Deployment completed at: ${new Date().toISOString()}`;

            // Create a GitHub issue or comment to notify the team
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üöÄ Production Deployment: v${version}`,
              body: message,
              labels: ['deployment', 'production']
            });

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback to previous version
        run: |
          echo "Rolling back production deployment..."
          # Add rollback commands here
          # kubectl rollout undo deployment/mcp-server

      - name: Verify rollback
        run: |
          echo "Verifying rollback success..."
          # Add verification commands here

      - name: Notify rollback completion
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîÑ Production Rollback Completed',
              body: 'Production deployment has been rolled back successfully.',
              labels: ['rollback', 'production', 'urgent']
            });