name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'node-cache-v1'

jobs:
  # Code Quality & Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Type check
        run: npm run type-check

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Unit and Integration Tests
  test:
    name: Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20', '21']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18'
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # End-to-End Tests
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start test server
        run: npm run start:test &
        env:
          NODE_ENV: test
          PORT: 3001

      - name: Wait for server
        run: npx wait-on http://localhost:3001/health --timeout 30000

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-artifacts
          path: |
            test-results/
            screenshots/
            logs/

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Package application
        run: npm pack

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            *.tgz
          retention-days: 7

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Run performance tests
        run: npm run test:performance

      - name: Comment performance results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            try {
              const results = fs.readFileSync('performance-results.json', 'utf8');
              const data = JSON.parse(results);

              const comment = `## üìä Performance Test Results

              | Metric | Value | Threshold | Status |
              |--------|-------|-----------|--------|
              | Tool Execution (p95) | ${data.toolExecution.p95}ms | <500ms | ${data.toolExecution.p95 < 500 ? '‚úÖ' : '‚ùå'} |
              | Memory Usage | ${data.memoryUsage}MB | <512MB | ${data.memoryUsage < 512 ? '‚úÖ' : '‚ùå'} |
              | Concurrent Requests | ${data.concurrentRequests}/s | >100/s | ${data.concurrentRequests > 100 ? '‚úÖ' : '‚ùå'} |

              ${data.memoryUsage > 512 || data.toolExecution.p95 > 500 ? '‚ö†Ô∏è Performance degradation detected' : 'üéâ All performance metrics passed'}`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('No performance results found or error reading results');
            }

  # Dependency Analysis
  dependencies:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Analyze bundle size
        run: npm run analyze:bundle

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Check for unused dependencies
        run: npx depcheck || true

      - name: Generate dependency report
        run: npm run analyze:deps

  # Notification on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality, security, test, e2e, build]
    if: failure()
    steps:
      - name: Notify team on failure
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;

            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: '‚ùå CI Pipeline failed. Please check the failed jobs and fix the issues before merging.'
              });
            }
